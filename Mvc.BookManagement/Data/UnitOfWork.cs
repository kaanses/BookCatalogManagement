using Mvc.BookManagement.Interfaces;namespace Mvc.BookManagement.Data{    public class UnitOfWork : IUnitOfWork, IDisposable    {        private readonly ApplicationDbContext _context;        private Dictionary<Type, object>? _repositories;        private bool _disposed = false;        public UnitOfWork(ApplicationDbContext context)        {            _context = context;        }        public IRepository<T> Repository<T>() where T : class        {            _repositories ??= new Dictionary<Type, object>();            var type = typeof(T);            if (!_repositories.ContainsKey(type))            {                _repositories[type] = new Repository<T>(_context);            }            return (IRepository<T>)_repositories[type];        }        public async Task<int> CommitAsync(CancellationToken cancellationToken = default)        {            return await _context.SaveChangesAsync(cancellationToken);        }                public void Dispose()        {            Dispose(true);            GC.SuppressFinalize(this);        }                protected virtual void Dispose(bool disposing)        {            if (!_disposed)            {                if (disposing)                {                    _context.Dispose();                }            }            _disposed = true;        }    }}