using Microsoft.EntityFrameworkCore;using Mvc.BookManagement.Interfaces;namespace Mvc.BookManagement.Data{    public class Repository<T> : IRepository<T> where T : class    {        protected readonly ApplicationDbContext _context;        protected readonly DbSet<T> _dbSet;        public Repository(ApplicationDbContext context)        {            _context = context;            _dbSet = context.Set<T>();        }        public async Task<IEnumerable<T>> GetAllAsync(CancellationToken cancellationToken = default)        {            return await _dbSet.ToListAsync(cancellationToken);        }        public async Task<T?> GetByIdAsync(object id, CancellationToken cancellationToken = default)        {            return await _dbSet.FindAsync(id, cancellationToken);        }        public async Task AddAsync(T entity, CancellationToken cancellationToken = default)        {            await _dbSet.AddAsync(entity, cancellationToken);        }                public void Update(T entity)        {            _dbSet.Update(entity);        }        public void Delete(T entity)        {            _dbSet.Remove(entity);        }        public async Task<int> SaveChangesAsync()        {            return await _context.SaveChangesAsync();        }    }}