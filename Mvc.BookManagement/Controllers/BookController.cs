// Controllers/BooksController.csusing AutoMapper;using Microsoft.AspNetCore.Mvc;using Mvc.BookManagement.Interfaces;using Ardalis.Result;using Mvc.BookManagement.Models.DTOs;using Mvc.BookManagement.Models.ViewModels;namespace Mvc.BookManagement.Controllers{    [Route("[controller]")]    public class BookController : Controller    {        private readonly IBookService _bookService;        private readonly IMapper _mapper;        private readonly IResultHandlerFactory _resultHandlerFactory;        private IResultHandler _resultHandler;        public BookController(            IBookService bookService,             IMapper mapper,            IResultHandlerFactory resultHandlerFactory)        {            _bookService = bookService;            _mapper = mapper;            _resultHandlerFactory = resultHandlerFactory;            _resultHandler = _resultHandlerFactory.Create(this);        }                [HttpGet]        [Route("Details/{id}")]        public async Task<IActionResult> Details(int id)        {            var result = await _bookService.GetBookByIdAsync(id);            return _resultHandler.HandleResult(result, book =>            {                var viewModel = _mapper.Map<BookViewModel>(book);                return Ok(viewModel);            });        }        // POST: Books/Create        [HttpPost]        [Route("Create")]        public async Task<IActionResult> Create([FromForm]BookCreateViewModel viewModel)        {            var bookInputDto = _mapper.Map<BookInputDTO>(viewModel);            var result = await _bookService.CreateBookAsync(bookInputDto);                        return _resultHandler.HandleResult(result, book =>            {                TempData["SuccessMessage"] = "Book created successfully!";                return RedirectToAction("Index", "Home");            });        }                [HttpPost]        [Route("Edit")]        public async Task<IActionResult> Edit(int id, BookUpdateViewModel viewModel)        {            var bookInputDto = _mapper.Map<BookInputDTO>(viewModel);            var result = await _bookService.UpdateBookAsync(id, bookInputDto);                        return _resultHandler.HandleResult(result, book =>            {                TempData["SuccessMessage"] = "Book updated successfully!";                return RedirectToAction("Index", "Home");            });        }                [HttpPost]        [Route("Delete")]        public async Task<IActionResult> Delete(int id)        {            var result = await _bookService.DeleteBookAsync(id);                        if (result.IsSuccess)            {                TempData["SuccessMessage"] = "Book deleted successfully!";                return RedirectToAction("Index", "Home");            }                        // Even for non-generic Result, we can use the handler if we wrap it            if (result.Status == ResultStatus.NotFound)            {                return NotFound();            }                        TempData["ErrorMessage"] = "Failed to delete book. Please try again later.";            return RedirectToAction("Index", "Home");        }    }}