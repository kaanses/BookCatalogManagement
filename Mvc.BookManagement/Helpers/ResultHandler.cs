using Ardalis.Result;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Localization;using Mvc.BookManagement.Interfaces;using Mvc.BookManagement.Resources.SharedResources;namespace Mvc.BookManagement.Helpers{    public class ResultHandler : IResultHandler    {        private readonly Controller _controller;        private readonly IStringLocalizer<SharedResource> _localizer;        public ResultHandler(Controller controller, IStringLocalizer<SharedResource> localizer)        {            _controller = controller;            _localizer = localizer;        }      public IActionResult HandleResult<T>(Result<T> result, Func<T, IActionResult> onSuccess)        {            if (result.IsSuccess)            {                return onSuccess(result.Value);            }            switch (result.Status)            {                case ResultStatus.NotFound:                    Serilog.Log.Warning("Resource not found: {Message}",                        result.Errors?.FirstOrDefault() ?? "No specific error message");                    return _controller.NotFound();                case ResultStatus.Invalid:                    Serilog.Log.Warning("Validation failed: {ValidationErrors}",                        string.Join(", ", result.ValidationErrors.Select(e => $"{e.Identifier} {e.ErrorMessage}")));                    var errorMessages = new List<string>();                        foreach (var error in result.ValidationErrors)                    {                        errorMessages.Add($"{_localizer[error.Identifier].Value} {error.ErrorMessage}");                    }                        _controller.TempData["ValidationErrorTitle"] = _localizer["ValidationError"].Value;                    _controller.TempData["ValidationErrors"] = errorMessages;                        return _controller.RedirectToAction("Index", "Home");                                                case ResultStatus.Error:                default:                    Serilog.Log.Error("Error in operation: {Errors}",                        string.Join(", ", result.Errors ?? new List<string> { "Unknown error" }));                    _controller.TempData["ErrorMessage"] = _localizer["GeneralError"].Value;                    return _controller.RedirectToAction("Index", "Home");            }        }    }}   