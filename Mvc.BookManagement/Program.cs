using AutoMapper;using FluentValidation;using Microsoft.EntityFrameworkCore;using Mvc.BookManagement.Data;using Mvc.BookManagement.Helpers;using Mvc.BookManagement.Interfaces;using Mvc.BookManagement.Mappings;using Mvc.BookManagement.Models.DTOs;using Mvc.BookManagement.Services;using Mvc.BookManagement.Validators;using Serilog;using System.IO;var builder = WebApplication.CreateBuilder(args);// Configure Serilog - IMPROVED SETUPLog.Logger = new LoggerConfiguration()    .ReadFrom.Configuration(builder.Configuration)    .CreateLogger();// Use Serilog as the logging provider for ASP.NET Corebuilder.Host.UseSerilog();try{    builder.Services.AddDbContext<ApplicationDbContext>(options =>        options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));    // Configure AutoMapper    var mapperConfig = new MapperConfiguration(cfg =>    {        cfg.AddProfile<MappingProfile>();    });        IMapper mapper = mapperConfig.CreateMapper();        builder.Services.AddSingleton(mapper);        builder.Services.AddSingleton<IResultHandlerFactory, ResultHandlerFactory>();    builder.Services.AddControllersWithViews();    builder.Services.AddMemoryCache();    builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();    builder.Services.AddScoped<IValidator<BookInputDTO>, BookInputDTOValidator>();    builder.Services.AddScoped<IBookService, BookService>();    var app = builder.Build();    // Initialize and seed the database    using (var scope = app.Services.CreateScope())    {        var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();                try        {            dbContext.Database.EnsureCreated();        }        catch (Exception ex)        {            Log.Error(ex, "Error initializing database");        }    }    // Configure the HTTP request pipeline    if (!app.Environment.IsDevelopment())    {        app.UseExceptionHandler("/Home/Error");        app.UseHsts();    }    app.UseHttpsRedirection();    app.UseStaticFiles();    app.UseRouting();    app.UseAuthorization();    app.MapControllerRoute(        name: "default",        pattern: "{controller=Home}/{action=Index}/{id?}");    app.Run();}finally{    // Ensure to flush and close the log    Log.CloseAndFlush();}