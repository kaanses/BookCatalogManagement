using AutoMapper;using FluentValidation;using Microsoft.EntityFrameworkCore;using Mvc.BookManagement.Data;using Mvc.BookManagement.Helpers;using Mvc.BookManagement.Interfaces;using Mvc.BookManagement.Mappings;using Mvc.BookManagement.Models.DTOs;using Mvc.BookManagement.Services;using Mvc.BookManagement.Validators;using Serilog;using System.Globalization;using Microsoft.AspNetCore.Localization;using Microsoft.Extensions.Localization;using Mvc.BookManagement.Resources.SharedResources;var builder = WebApplication.CreateBuilder(args);Log.Logger = new LoggerConfiguration()    .ReadFrom.Configuration(builder.Configuration)    .CreateLogger();builder.Host.UseSerilog();try{    builder.Services.AddDbContext<ApplicationDbContext>(options =>        options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));            var mapperConfig = new MapperConfiguration(cfg =>    {        cfg.AddProfile<MappingProfile>();    });        IMapper mapper = mapperConfig.CreateMapper();        builder.Services.AddSingleton(mapper);        builder.Services.AddLocalization(options => options.ResourcesPath = "");    var supportedCultures = new[]    {        new CultureInfo("en"),        new CultureInfo("tr")            };    builder.Services.Configure<RequestLocalizationOptions>(options =>    {        options.DefaultRequestCulture = new RequestCulture("en");        options.SupportedCultures = supportedCultures;        options.SupportedUICultures = supportedCultures;                options.RequestCultureProviders = new List<IRequestCultureProvider>        {            new QueryStringRequestCultureProvider(),            new CookieRequestCultureProvider(),            new AcceptLanguageHeaderRequestCultureProvider()        };    });    builder.Services.AddSingleton<SharedResource>();    builder.Services.AddSingleton<IResultHandlerFactory, ResultHandlerFactory>();        builder.Services.AddControllersWithViews()        .AddViewLocalization(Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat.Suffix);        builder.Services.AddMemoryCache();    builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();    builder.Services.AddScoped<IValidator<BookInputDTO>>(provider => {        var localizer = provider.GetRequiredService<IStringLocalizer<SharedResource>>();        return new BookInputDTOValidator(localizer);    });    builder.Services.AddScoped<IBookService, BookService>();        var app = builder.Build();    using (var scope = app.Services.CreateScope())    {        var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();                try        {            dbContext.Database.EnsureCreated();        }        catch (Exception ex)        {            Log.Error(ex, "Error initializing database");        }    }    if (!app.Environment.IsDevelopment())    {        app.UseExceptionHandler("/Home/Error");        app.UseHsts();    }     app.UseRequestLocalization();    app.UseHttpsRedirection();    app.UseStaticFiles();    app.UseRouting();    app.UseAuthorization();            app.MapControllerRoute(            name: "default",            pattern: "{controller=Home}/{action=Index}/{id?}")        .WithRequestTimeout(TimeSpan.FromSeconds(30));        app.Run();}finally{    Log.CloseAndFlush();}